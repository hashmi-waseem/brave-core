diff --git a/tools/typescript/ts_library.py b/tools/typescript/ts_library.py
index 4dbbb4455516ac35b0df5204bc182fe798468119..679f31de69f41fd31efa926b90d3be7b040ac907 100644
--- a/tools/typescript/ts_library.py
+++ b/tools/typescript/ts_library.py
@@ -247,20 +247,21 @@ def main(argv):
 
   # Invoke the TS compiler again, with the --listFilesOnly flag, to detect any
   # files that are used by the build, but not properly declared as dependencies.
-  out = node.RunNode([
-      node_modules.PathToTypescript(),
-      '--project',
-      os.path.join(args.gen_dir, tsconfig_file),
-      '--listFilesOnly',
-  ])
-  files_list = out.split('\n')
-  definitions_files = list(filter(lambda f: f.endswith('.d.ts'), files_list))
-  definitions = args.definitions if args.definitions is not None else []
-  list_valid, error_msg = validateDefinitionDeps(definitions_files, target_path,
-                                                 args.gen_dir,
-                                                 args.root_gen_dir, definitions)
-  if not list_valid:
-    raise AssertionError(error_msg)
+  if False:
+    out = node.RunNode([
+        node_modules.PathToTypescript(),
+        '--project',
+        os.path.join(args.gen_dir, tsconfig_file),
+        '--listFilesOnly',
+    ])
+    files_list = out.split('\n')
+    definitions_files = list(filter(lambda f: f.endswith('.d.ts'), files_list))
+    definitions = args.definitions if args.definitions is not None else []
+    list_valid, error_msg = validateDefinitionDeps(definitions_files, target_path,
+                                                  args.gen_dir,
+                                                  args.root_gen_dir, definitions)
+    if not list_valid:
+      raise AssertionError(error_msg)
 
   if args.in_files is not None:
     manifest_path = os.path.join(args.gen_dir,
@@ -277,5 +278,6 @@ def main(argv):
       json.dump(manifest_data, manifest_file)
 
 
+from brave_chromium_utils import inline_chromium_src_override; inline_chromium_src_override(globals(), locals())
 if __name__ == '__main__':
   main(sys.argv[1:])
